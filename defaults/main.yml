---
# Default variables
# =================

# .. contents:: Sections
#    :local:
#
# -----------------------------
#   General tinc node options
# -----------------------------

# .. envvar:: tinc_connection_type
#
# How this VPN node will be connected to the network:
#
# - ``dhcp``: stand alone mode; network interface is started and host asks the
#   mesh network for an IP address
#
# - ``static``: bridge mode; network interface is started and connected to
#   a specified bridge, no DHCP requests are made
#
tinc_connection_type: 'dhcp'


# .. envvar:: tinc_connection_bridge
#
# Name of the bridge interface which will be used to connect to the mesh
# network in the ``static`` mode; by default it's bridge created by
# ``debops.subnetwork`` role. Set to ``False`` to disable bridged connection.
tinc_connection_bridge: 'br2'


# .. envvar:: tinc_hostname
#
# Name of this node used in configuration files. Thruought the mesh. Don't
# change this unless you know what you are doing.
tinc_hostname: '{{ inventory_hostname_short }}'


# .. envvar:: tinc_inventory_hosts
#
# List of hosts from Ansible inventory which will be used to gather the tinc
# public keys and connect to form the mesh.
tinc_inventory_hosts: '{{ groups.debops_tinc }}'


# .. envvar:: tinc_external_hosts
#
# Dict variable which defines mesh nodes outside of the Ansible inventory. Each
# key is the name of the node, and value is the content of that node host file
# in YAML text block format, or a ``lookup()`` output. See
# :ref:`tinc_external_hosts` for more details.
tinc_external_hosts: {}


# .. envvar:: tinc_connect_to
#
# List of hosts which this ``tinc`` node should connect to; by default each
# node connects to every other node.
tinc_connect_to: '{{ tinc_inventory_hosts + tinc_external_hosts.keys()|d([]) }}'


# .. envvar:: tinc_ferm_allow_any
#
# Enable or disable external access to ``tinc`` VPN through the firewall.
# If access is disabled, only outgoing connections will work.
tinc_ferm_allow_any: True


# ---------------------------
#   Application environment
# ---------------------------

# .. envvar:: tinc_user
#
# System user account which is used to run ``tincd``.
tinc_user: 'tinc-vpn'


# .. envvar:: tinc_group
#
# System group which is used to access ``tincd`` configuration files.
tinc_group: 'tinc-vpn'


# .. envvar:: tinc_home
#
# Home directory of the ``tincd`` user.
tinc_home: '/etc/tinc'


# .. envvar:: tinc_network
#
# Name of the network configuration in ``/etc/tinc/`` which is managed by this
# instance of the ``debops.tinc`` role.
tinc_network: 'mesh0'


# .. envvar:: tinc_ulimit_options
#
# List of options passed to ``ulimit`` command before starting ``tincd``
# processs. Set maximum size of address space locked into memory, in KB.
tinc_ulimit_options: '-l {{ (1024 * 64) }}'


# .. envvar:: tinc_rsa_key_length
#
# Length of the RSA private key generated on each node
tinc_rsa_key_length: '4096'


# -----------------------------------
#   Network interface configuration
# -----------------------------------

# .. envvar:: tinc_interface
#
# Network interface used by the ``tincd`` daemon.
tinc_interface: 'tap2'


# .. envvar:: tinc_interface_auto
#
# Start VPN interface on boot as well as during the Ansible run, or update
# daemon configuration. Set to ``False`` to not start the VPN automatically and
# not notify the ``tincd`` daemon about changes.
tinc_interface_auto: True


# .. envvar:: tinc_ifupdown_interfaces
#
# Configuration of the VPN network interface passed to ``debops.ifupdown``
# role using role dependency variables.
tinc_ifupdown_interface:
  iface: '{{ tinc_interface }}'
  type: 'interface'
  weight: '75'
  inet: '{{ tinc_connection_type }}'
  auto: '{{ tinc_interface_auto }}'
  auto_ifup: False
  force: True
  options: |
    tinc-net {{ tinc_network }}
    tinc-chroot yes
    tinc-mlock yes
    tinc-user {{ tinc_user }}
    {% if tinc_connection_type == 'static' %}
    {{ tinc_ifupdown_options_static[tinc_interface]|d() }}
    {% elif tinc_connection_type == 'dhcp' %}
    {{ tinc_ifupdown_options_dhcp[tinc_interface]|d() }}
    {% endif %}


# .. envvar:: tinc_ifupdown_options_static
#
# Dict with additional options for the VPN network interface configured in the
# ``static`` mode, each interface name needs to be written normally, not as
# a variable. Options are specified in a YAML text block.
tinc_ifupdown_options_static:
  '{{ tinc_interface }}': |
    address 0.0.0.0
    {% if tinc_connection_bridge|d() and tinc_connection_bridge %}
    post-up brctl addif {{ tinc_connection_bridge }} {{ tinc_interface }}
    pre-down brctl delif {{ tinc_connection_bridge }} {{ tinc_interface }}
    {% endif %}


# .. envvar:: tinc_ifupdown_options_dhcp
#
# Dict with additional options for the VPN network interface configured in the
# ``dhcp`` mode, each interface name needs to be written normally, not as
# a variable. Options are specified in a YAML text block.
tinc_ifupdown_options_dhcp: {}


# -----------------------------
#   tinc daemon configuration
# -----------------------------

# .. envvar:: tinc_configuration
#
# Dict with main configuration variables for ``tincd``. Each key is name of the
# config option, value is the value set for that option. See ``tinc.conf(5)``
# "SERVER CONFIGURATION" section for possible configuration options.
tinc_configuration:
  Mode: 'switch'
  DeviceType: 'tap'
  ConnectTo: '{{ tinc_connect_to | difference([ tinc_hostname ]) }}'


# .. envvar:: tinc_daemon_configuration
#
# Dict with additional configuration options for ``tincd``, it will be added to
# configuration options in in ``tinc_configuration`` variable. Entries from
# ``tinc_daemon_configuration`` will override those set in
# ``tinc_configuration``.
tinc_daemon_configuration: {}


# .. envvar:: tinc_host_configuration
#
# Dict with configuration options for the host file in
# ``/etc/tinc/<network>/hosts/<hostname>``. See ``tinc.conf(5)`` "HOST
# CONFIGURATION FILES" section for available options.
tinc_host_configuration: {}


# .. envvar:: tinc_host_addresses
#
# List of IP addresses on which ``tincd`` should listen for new connections,
# will be specified in the host file. If not set, ``tincd`` will listen for
# connections on all available public IP addresses.
tinc_host_addresses: []


# .. envvar:: tinc_scripts
#
# Dict with custom scripts for ``tincd``, each key is name of the script, value
# in YAML text block format will be set as contents of the file. See
# ``tinc.conf(5)`` "SCRIPTS" section to see possible script names and their
# purpose.
tinc_scripts: {}

